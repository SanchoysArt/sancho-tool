import asyncio
from telethon import TelegramClient, events
import os
import importlib
import json
import time
import subprocess
import sys
import random
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.ERROR,
    format='%(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('sancho_errors.log')  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    ]
)

CONFIG_FILE = "config.json"
MODULES_DIR = "modules"
start_time = time.time()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
modules_load_errors = False

def get_api_credentials():
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, "r") as file:
                return json.load(file)
        
        print("=== Sancho-Tool Configuration ===")
        api_id = input("–í–≤–µ–¥–∏—Ç–µ API_ID: ")
        api_hash = input("–í–≤–µ–¥–∏—Ç–µ API_HASH: ")
        
        credentials = {"API_ID": int(api_id), "API_HASH": api_hash}
        with open(CONFIG_FILE, "w") as file:
            json.dump(credentials, file)
        
        return credentials
    except Exception as e:
        logging.error(f"Error in get_api_credentials: {str(e)}")
        raise

credentials = get_api_credentials()

device_models = [
    "Samsung Galaxy S23 Ultra",
    "iPhone 14 Pro Max",
    "Google Pixel 7 Pro",
    "Xiaomi 13 Pro",
    "OnePlus 11",
    "Huawei P60 Pro",
    "Realme GT 3",
    "Nothing Phone 2",
    "Sony Xperia 1 V",
    "Motorola Edge 40 Pro"
]
device_model = random.choice(device_models)

client = TelegramClient(
    "sancho_tool_session",
    credentials["API_ID"],
    credentials["API_HASH"],
    device_model=device_model,
    system_version="Android 13",
    app_version="10.2.1",
    lang_code="ru",
    system_lang_code="ru-RU"
)

def load_modules(client):
    global modules_load_errors
    try:
        if not os.path.exists(MODULES_DIR):
            os.makedirs(MODULES_DIR)
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –º–æ–¥—É–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        for module_name in list(sys.modules.keys()):
            if module_name.startswith(MODULES_DIR + '.'):
                del sys.modules[module_name]
        
        for filename in os.listdir(MODULES_DIR):
            if filename.endswith(".py"):
                try:
                    module_name = f"{MODULES_DIR}.{filename[:-3]}"
                    
                    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
                    if module_name in sys.modules:
                        module = importlib.reload(sys.modules[module_name])
                    else:
                        module = importlib.import_module(module_name)
                    
                    if hasattr(module, "register"):
                        module.register(client)
                        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: {filename}")
                except Exception as e:
                    modules_load_errors = True
                    logging.error(f"Error loading module {filename}: {str(e)}")
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {filename}: {e}")
                    
    except Exception as e:
        modules_load_errors = True
        logging.error(f"Error in load_modules: {str(e)}")
        print(f"–û—à–∏–±–∫–∞ –≤ load_modules: {e}")

@client.on(events.NewMessage(pattern=r"\.update", outgoing=True))
async def update(event):
    try:
        await event.edit("üîÑ –û–±–Ω–æ–≤–ª—è—é Sancho-Tool...")
        process = subprocess.run(
            ["git", "pull", "https://github.com/SanchoysArt/sancho-tool.git", "main"],
            capture_output=True,
            text=True,
            timeout=60
        )

        if "Already up to date." in process.stdout:
            await event.edit("‚úÖ –£ –≤–∞—Å —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è Sancho-Tool!")
        else:
            await event.edit("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –ò–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Sancho-Tool...")
            os.execl(sys.executable, sys.executable, *sys.argv)

    except subprocess.TimeoutExpired:
        await event.edit("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ git pull")
    except Exception as e:
        logging.error(f"Error in .update command: {str(e)}")
        await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: `{str(e)}`")

@client.on(events.NewMessage(pattern=r"\.repo", outgoing=True))
async def repo_info(event):
    try:
        process = subprocess.run(["git", "remote", "-v"], 
                               capture_output=True, 
                               text=True,
                               timeout=10)
        
        repo_info_text = f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:**\n"
        
        if process.returncode == 0:
            repo_info_text += f"```{process.stdout.strip()}```\n"
        else:
            repo_info_text += "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        
        repo_info_text += f"**–¶–µ–ª–µ–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:**\nSancboysArt/sancho-tool\n"
        repo_info_text += f"**–°—Å—ã–ª–∫–∞:** https://github.com/SancboysArt/sancho-tool"
        
        await event.edit(repo_info_text)
        
    except Exception as e:
        logging.error(f"Error in repo_info: {str(e)}")
        await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.ping", outgoing=True))
async def ping(event):
    try:
        start_time_ping = time.time()
        msg = await event.edit("–ü—Ä–æ–≤–µ—Ä–∫–∞ ping...")
        ping_time = round((time.time() - start_time_ping) * 1000, 2)
        await msg.edit(f"Ping: {ping_time}ms")
    except Exception as e:
        logging.error(f"Error in ping: {str(e)}")
        await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.uptime", outgoing=True))
async def uptime(event):
    try:
        uptime_seconds = int(time.time() - start_time)
        hours, remainder = divmod(uptime_seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        await event.edit(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours}—á {minutes}–º {seconds}—Å")
    except Exception as e:
        logging.error(f"Error in uptime: {str(e)}")
        await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.save", outgoing=True))
async def save_self_destructing_media(event):
    try:
        reply = await event.get_reply_message()
        if reply and reply.media and reply.media.ttl_seconds:
            await client.send_message("me", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è –º–µ–¥–∏–∞:", file=reply.media)
            await event.edit("–ú–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        else:
            await event.edit("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è –º–µ–¥–∏–∞")
    except Exception as e:
        logging.error(f"Error in save_self_destructing_media: {str(e)}")
        await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.phones", outgoing=True))
async def scan_numbers(event):
    try:
        await event.edit("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤...")
        chat = await event.get_chat()
        users = await client.get_participants(chat)
        phone_numbers = {}
        for user in users:
            if user.phone:
                phone_numbers[user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"] = user.phone
        if phone_numbers:
            result = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(f"{name}: {phone}" for name, phone in phone_numbers.items())
            await client.send_message("me", result)
            await event.edit("–ù–æ–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        else:
            await event.edit("–í —á–∞—Ç–µ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤")
    except Exception as e:
        logging.error(f"Error in scan_numbers: {str(e)}")
        await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.start", outgoing=True))
async def start_command(event):
    try:
        await event.edit("Sancho-Tool –∑–∞–ø—É—â–µ–Ω\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        logging.error(f"Error in start_command: {str(e)}")
        await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.restart", outgoing=True))
async def restart_command(event):
    try:
        await event.edit("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Sancho-Tool...")
        await asyncio.sleep(2)
        os.execl(sys.executable, sys.executable, *sys.argv)
    except Exception as e:
        logging.error(f"Error in restart_command: {str(e)}")
        await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.me", outgoing=True))
async def me_command(event):
    try:
        me = await client.get_me()
        await event.edit(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
                       f"–ò–º—è: {me.first_name}\n"
                       f"–§–∞–º–∏–ª–∏—è: {me.last_name or '–ù–µ—Ç'}\n"
                       f"Username: @{me.username or '–ù–µ—Ç'}\n"
                       f"ID: {me.id}\n"
                       f"–ù–æ–º–µ—Ä: {me.phone or '–°–∫—Ä—ã—Ç'}")
    except Exception as e:
        logging.error(f"Error in me_command: {str(e)}")
        await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.help", outgoing=True))
async def help_command(event):
    try:
        help_text = (
            "**Sancho-Tool | –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥**\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ .start - __–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã__\n"
            "‚Ä¢ .help - __–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥__\n"
            "‚Ä¢ .ping - __–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–∫–ª–∏–∫–∞__\n"
            "‚Ä¢ .uptime - __–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã__\n"
            "‚Ä¢ .me - __–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ__\n"
            "‚Ä¢ .restart - __–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã__\n"
            "‚Ä¢ .update - __–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏__\n\n"
            
            "**–ú–µ–¥–∏–∞ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ .save - __–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–≥–æ—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞__\n"
            "‚Ä¢ .phones - __–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –≤ —á–∞—Ç–µ__\n\n"
            
            "**–°–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ .sancho - __–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ__\n"
            "‚Ä¢ .sk <—Å—Å—ã–ª–∫–∞> - __–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å Tiktok/Youtube__\n"
            "‚Ä¢ .swat - __–í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫ —Å–≤–∞—Ç–µ—Ä–∞__\n"
            "‚Ä¢ .dl help - __–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º__\n"
            "‚Ä¢ .call <—á–∏—Å–ª–æ> - __–ü—Ä–∏–∑—ã–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ—Ö__\n"
            "‚Ä¢ .respond help - __–ü–æ–º–æ—â—å —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º__\n"
            "‚Ä¢ .trns help - __–ü–æ–º–æ—â—å —Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º__ \n"
            "‚Ä¢ .media help - __–ü–æ–º–æ—â—å —Å –º–µ–¥–∏–∞__\n"
            "‚Ä¢ .sq <time> <message> - __–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è__\n"
            "‚Ä¢ .who - __–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ__\n"
            "‚Ä¢ .gpt - __–ó–∞–ø—Ä–æ—Å –∫ AI__\n\n"
            
            "**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            "__–í–µ—Ä—Å–∏—è: 1.0__\n"
            "__–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telethon__\n"
            "__–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @CekcyaJlHblu_6po__\n"
            "__–°—Ç–∞—Ç—É—Å: Production Ready__"
        )

        image_path = "help.jpg"
        if os.path.exists(image_path):
            try:
                await client.send_file(event.chat_id, image_path, caption=help_text)
                await event.delete()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ help image: {e}")
                await event.edit(help_text)
        else:
            await event.edit(help_text)
    except Exception as e:
        logging.error(f"Error in help_command: {str(e)}")
        await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.sancho", outgoing=True))
async def sancho_info(event):
    try:
        start_time_ping = time.time()
        msg = await event.edit("–∏–¥–µ—Ç –ø–∏–∑–¥–∞—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞...")
        end_time_ping = time.time()
        ping_time = round((end_time_ping - start_time_ping) * 1000, 2)
        
        me = await client.get_me()
        phone_number = me.phone if me.phone else 'Hidden'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π
        status = "Active" if not modules_load_errors else "Errors"
        
        info_text = (
            "**Sancho-Tool | System**\n\n"
            f"**Version:** 1.0\n"
            f"**Platform:** Telethon\n"
            f"**Ping:** __{ping_time}ms__\n"
            f"**Status:** __{status}__\n\n"
            f"**Developer** - @CekcyaJlHblu_6po\n\n"
            "__Multifunctional extension__\n"
            "__for Telegram__"
        )
        
        image_path = "sancho.jpg"
        if os.path.exists(image_path):
            try:
                await client.send_file(event.chat_id, image_path, caption=info_text)
                await event.delete()
            except Exception as e:
                logging.error(f"Error sending image: {e}")
                await event.edit(info_text)
        else:
            await event.edit(info_text)
    except Exception as e:
        logging.error(f"Error in sancho_info: {str(e)}")
        await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
load_modules(client)

# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
print("–ó–∞–ø—É—Å–∫ Sancho-Tool...")
print("Device:", device_model)
print("–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:", time.strftime("%Y-%m-%d %H:%M:%S"))

client.start()
print("Sancho-Tool —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

client.run_until_disconnected()
