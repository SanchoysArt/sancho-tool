import asyncio
from telethon import TelegramClient, events
import os
import importlib
import json
import time
import subprocess
import sys
import random
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.ERROR,
    format='%(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('sancho_errors.log')
    ]
)

CONFIG_FILE = "config.json"
MODULES_DIR = "modules"
start_time = time.time()
modules_load_errors = False

def get_api_credentials():
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, "r") as file:
                return json.load(file)
        print("=== Sancho-Tool Configuration ===")
        api_id = input("–í–≤–µ–¥–∏—Ç–µ API_ID: ")
        api_hash = input("–í–≤–µ–¥–∏—Ç–µ API_HASH: ")
        credentials = {"API_ID": int(api_id), "API_HASH": api_hash}
        with open(CONFIG_FILE, "w") as file:
            json.dump(credentials, file)
        return credentials
    except Exception as e:
        logging.error(f"Error in get_api_credentials: {str(e)}")
        raise

credentials = get_api_credentials()

device_models = [
    "Samsung Galaxy S23 Ultra",
    "iPhone 14 Pro Max",
    "Google Pixel 7 Pro",
    "Xiaomi 13 Pro",
    "OnePlus 11",
    "Huawei P60 Pro",
    "Realme GT 3",
    "Nothing Phone 2",
    "Sony Xperia 1 V",
    "Motorola Edge 40 Pro"
]
device_model = random.choice(device_models)

client = TelegramClient(
    "sancho_tool_session",
    credentials["API_ID"],
    credentials["API_HASH"],
    device_model=device_model,
    system_version="Android 13",
    app_version="10.2.1",
    lang_code="ru",
    system_lang_code="ru-RU"
)

# ========================== –ù–æ—Ä–º–∞–ª—å–Ω—ã–π loader ==========================

import importlib.util

def load_modules(client):
    global modules_load_errors
    modules_loaded = 0
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...")
    try:
        if not os.path.exists(MODULES_DIR):
            os.makedirs(MODULES_DIR)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {MODULES_DIR}")
            return modules_loaded

        if MODULES_DIR not in sys.path:
            sys.path.insert(0, MODULES_DIR)

        for filename in os.listdir(MODULES_DIR):
            if filename.endswith(".py") and filename != "__init__.py":
                module_name = filename[:-3]
                try:
                    spec = importlib.util.spec_from_file_location(module_name, os.path.join(MODULES_DIR, filename))
                    if spec is None:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {filename}")
                        continue
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)
                    for attr_name in dir(module):
                        attr = getattr(module, attr_name)
                        if isinstance(attr, type) and 'Module' in attr_name and hasattr(attr, 'register'):
                            module_class = attr
                            module_instance = module_class(client)
                            module_instance.register()
                            modules_loaded += 1
                            print(f"‚úÖ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {filename} (–∫–ª–∞—Å—Å: {attr_name})")
                            break
                    else:
                        print(f"‚ö†Ô∏è –í –º–æ–¥—É–ª–µ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–ª–∞—Å—Å")
                except Exception as e:
                    modules_load_errors = True
                    logging.error(f"Error loading {filename}: {str(e)}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è {filename}: {e}")
    except Exception as e:
        modules_load_errors = True
        logging.error(f"Error in load_modules: {str(e)}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ load_modules: {e}")

    print(f"üì¶ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {modules_loaded}")
    return modules_loaded

# ========================== –ö–æ–º–∞–Ω–¥—ã ==========================

@client.on(events.NewMessage(pattern=r"\.update", outgoing=True))
async def update(event):
    await event.delete()
    try:
        repo_dir = os.path.expanduser("~/sancho-tool")
        os.chdir(repo_dir)
        subprocess.run(["git", "fetch", "--all"], check=True)
        diff = subprocess.run(
            ["git", "diff", "--name-status", "origin/main"],
            capture_output=True, text=True
        ).stdout
        subprocess.run(["git", "reset", "--hard", "origin/main"], check=True)
        changes = f"–ò–∑–º–µ–Ω–µ–Ω–∏—è:\n{diff}" if diff.strip() else "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
        await client.send_message(event.chat_id, f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n{changes}\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        await asyncio.sleep(2)
        os.execl(sys.executable, sys.executable, *sys.argv)
    except Exception as e:
        await client.send_message(event.chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.repo", outgoing=True))
async def repo_info(event):
    await event.delete()
    try:
        process = subprocess.run(["git", "remote", "-v"], capture_output=True, text=True, timeout=10)
        repo_info_text = "**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:**\n"
        repo_info_text += f"```{process.stdout.strip()}```\n" if process.returncode == 0 else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        repo_info_text += "**–°—Å—ã–ª–∫–∞:** https://github.com/SancboysArt/sancho-tool"
        await client.send_message(event.chat_id, repo_info_text)
    except Exception as e:
        await client.send_message(event.chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.ping", outgoing=True))
async def ping(event):
    await event.delete()
    try:
        start_time_ping = time.time()
        ping_time = round((time.time() - start_time_ping) * 1000, 2)
        await client.send_message(event.chat_id, f"Ping: {ping_time}ms")
    except Exception as e:
        await client.send_message(event.chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.uptime", outgoing=True))
async def uptime(event):
    await event.delete()
    try:
        uptime_seconds = int(time.time() - start_time)
        h, r = divmod(uptime_seconds, 3600)
        m, s = divmod(r, 60)
        await client.send_message(event.chat_id, f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {h}—á {m}–º {s}—Å")
    except Exception as e:
        await client.send_message(event.chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.save", outgoing=True))
async def save_self_destructing_media(event):
    await event.delete()
    try:
        reply = await event.get_reply_message()
        if reply and reply.media and reply.media.ttl_seconds:
            await client.send_message("me", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –º–µ–¥–∏–∞:", file=reply.media)
            await client.send_message(event.chat_id, "–ú–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        else:
            await client.send_message(event.chat_id, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è –º–µ–¥–∏–∞")
    except Exception as e:
        await client.send_message(event.chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.phones", outgoing=True))
async def scan_numbers(event):
    await event.delete()
    try:
        chat = await event.get_chat()
        users = await client.get_participants(chat)
        phones = {u.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏": u.phone for u in users if u.phone}
        if phones:
            result = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(f"{n}: {p}" for n, p in phones.items())
            await client.send_message("me", result)
            await client.send_message(event.chat_id, "–ù–æ–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        else:
            await client.send_message(event.chat_id, "–í —á–∞—Ç–µ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤")
    except Exception as e:
        await client.send_message(event.chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.start", outgoing=True))
async def start_command(event):
    await event.delete()
    await client.send_message(event.chat_id, "Sancho-Tool –∑–∞–ø—É—â–µ–Ω\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .help –¥–ª—è –∫–æ–º–∞–Ω–¥")

@client.on(events.NewMessage(pattern=r"\.restart", outgoing=True))
async def restart_command(event):
    await event.delete()
    await client.send_message(event.chat_id, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Sancho-Tool...")
    await asyncio.sleep(2)
    os.execl(sys.executable, sys.executable, *sys.argv)

@client.on(events.NewMessage(pattern=r"\.me", outgoing=True))
async def me_command(event):
    await event.delete()
    try:
        me = await client.get_me()
        text = (f"–ò–º—è: {me.first_name}\n–§–∞–º–∏–ª–∏—è: {me.last_name or '–ù–µ—Ç'}\n"
                f"Username: @{me.username or '–ù–µ—Ç'}\nID: {me.id}\n–ù–æ–º–µ—Ä: {'–°–∫—Ä—ã—Ç'}")
        await client.send_message(event.chat_id, text)
    except Exception as e:
        await client.send_message(event.chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.help", outgoing=True))
async def help_command(event):
    await event.delete()
    try:
        help_text = (
            "**Sancho-Tool | –ö–æ–º–∞–Ω–¥—ã**\n"
            ".start, .help, .ping, .uptime, .me, .restart, .update, .repo, .sancho\n"
            ".save, .phones, –∏ –º–æ–¥—É–ª–∏ (.call, .respond, .sq, .swat, .who, .gpt)"
        )
        image_path = "help.jpg"
        if os.path.exists(image_path):
            await client.send_file(event.chat_id, image_path, caption=help_text)
        else:
            await client.send_message(event.chat_id, help_text)
    except Exception as e:
        await client.send_message(event.chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.sancho", outgoing=True))
async def sancho_info(event):
    await event.delete()
    try:
        ping_time = round((time.time() - start_time) * 1000, 2)
        status = "Active" if not modules_load_errors else "Errors"
        info_text = (
            "**Sancho-Tool | System**\n"
            f"Version: 1.0\nPlatform: Telethon\nPing: {ping_time}ms\n"
            f"Status: {status}\nDeveloper: @xranutel"
        )
        image_path = "sancho.jpg"
        if os.path.exists(image_path):
            await client.send_file(event.chat_id, image_path, caption=info_text)
        else:
            await client.send_message(event.chat_id, info_text)
    except Exception as e:
        await client.send_message(event.chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")

# ========================== –ó–∞–ø—É—Å–∫ ==========================

modules_count = load_modules(client)

print("üöÄ –ó–∞–ø—É—Å–∫ Sancho-Tool...")
print("üì± Device:", device_model)
print("‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:", time.strftime("%Y-%m-%d %H:%M:%S"))

client.start()
print("‚úÖ Sancho-Tool —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

client.run_until_disconnected()
