from telethon import events
from telethon.tl.types import User, Channel, Chat

class WhoModule:
    def __init__(self, client):
        self.client = client
    
    def register(self):
        @self.client.on(events.NewMessage(pattern=r'\.who$', outgoing=True))
        async def who_handler(event):
            """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)"""
            try:
                reply = await event.get_reply_message()
                if not reply:
                    await event.edit("‚ùå **–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**")
                    return
                
                user = await self.client.get_entity(reply.sender_id)
                info = await self.get_user_info(user)
                
                await event.edit(info)
                
            except Exception as e:
                await event.edit(f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}")
        
        @self.client.on(events.NewMessage(pattern=r'\.who (@?\w+)$', outgoing=True))
        async def who_username_handler(event):
            """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É"""
            try:
                username = event.pattern_match.group(1).replace('@', '')
                user = await self.client.get_entity(username)
                info = await self.get_user_info(user)
                
                await event.edit(info)
                
            except Exception as e:
                await event.edit(f"‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω**")
    
    async def get_user_info(self, user):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        user_id = f"`{user.id}`"
        first_name = user.first_name or "–ù–µ—Ç"
        last_name = user.last_name or "–ù–µ—Ç"
        username = f"@{user.username}" if user.username else "–ù–µ—Ç"
        phone = user.phone or "–°–∫—Ä—ã—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞
        is_bot = "‚úÖ –î–∞" if user.bot else "‚ùå –ù–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verified = "‚úÖ –î–∞" if getattr(user, 'verified', False) else "‚ùå –ù–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º–∞
        premium = "‚úÖ –î–∞" if getattr(user, 'premium', False) else "‚ùå –ù–µ—Ç"
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = ""
        if hasattr(user, 'status'):
            if user.status:
                status = f"**–°—Ç–∞—Ç—É—Å:** `{type(user.status).__name__}`\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        chat_info = ""
        if isinstance(user, (Channel, Chat)):
            chat_type = "–ö–∞–Ω–∞–ª" if getattr(user, 'broadcast', False) else "–ì—Ä—É–ø–ø–∞"
            participants = f"{user.participants_count}" if hasattr(user, 'participants_count') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            chat_info = f"**–¢–∏–ø:** {chat_type}\n**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {participants}\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        info = (
            f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
            f"**ID:** {user_id}\n"
            f"**–ò–º—è:** {first_name}\n"
            f"**–§–∞–º–∏–ª–∏—è:** {last_name}\n"
            f"**–Æ–∑–µ—Ä–Ω–µ–π–º:** {username}\n"
            f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {phone}\n"
            f"**–ë–æ—Ç:** {is_bot}\n"
            f"**–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:** {verified}\n"
            f"**–ü—Ä–µ–º–∏—É–º:** {premium}\n"
            f"{status}"
            f"{chat_info}"
            f"\nüìÖ **–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω**"
        )
        
        return info

def register(client):
    who_module = WhoModule(client)
    who_module.register()
