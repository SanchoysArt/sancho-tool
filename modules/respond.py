from telethon import events
import json
import os

class AutoResponderModule:
    def __init__(self, client, owner_id=None):
        self.client = client
        self.owner_id = owner_id  # user_id —Ö–æ–∑—è–∏–Ω–∞ (–µ—Å–ª–∏ None ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –ø–æ–∑–∂–µ)
        self.enabled = False
        self.response_text = ""
        self.config_file = "autoresponder_config.json"
        self.message_counters = {}
        self.answered_users = set()
        self.load_config()
    
    def load_config(self):
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r', encoding="utf-8") as f:
                    data = json.load(f)
                    self.enabled = data.get('enabled', False)
                    self.response_text = data.get('response_text', "")
            except Exception as e:
                print(f"[AutoResponder] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
                self.enabled = False
                self.response_text = ""
    
    def save_config(self):
        data = {
            'enabled': self.enabled,
            'response_text': self.response_text
        }
        with open(self.config_file, 'w', encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    
    def register(self):
        @self.client.on(events.NewMessage(pattern=r'\.respond$', outgoing=True))
        async def respond_toggle(event):
            self.enabled = not self.enabled
            self.save_config()
            if self.enabled:
                await event.edit("‚úÖ **–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω**\nüì© **–¢–æ–ª—å–∫–æ –≤ –õ–°**")
            else:
                await event.edit("‚ùå **–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω**")

        @self.client.on(events.NewMessage(pattern=r'\.respond set (.+)', outgoing=True))
        async def respond_set(event):
            self.response_text = event.pattern_match.group(1)
            self.save_config()
            await event.edit(f"‚úÖ **–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:**\n`{self.response_text}`")

        @self.client.on(events.NewMessage(pattern=r'\.respond status', outgoing=True))
        async def respond_status(event):
            status = "‚úÖ **–í–ö–õ–Æ–ß–ï–ù**" if self.enabled else "‚ùå **–í–´–ö–õ–Æ–ß–ï–ù**"
            await event.edit(
                f"ü§ñ **–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫:** {status}\n"
                f"üì© **–†–µ–∂–∏–º:** –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                f"üí¨ **–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:** {self.response_text or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
            )

        @self.client.on(events.NewMessage(pattern=r'\.respond reset', outgoing=True))
        async def respond_reset(event):
            self.message_counters.clear()
            self.answered_users.clear()
            await event.edit("‚ôªÔ∏è **–ò—Å—Ç–æ—Ä–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞**")

        @self.client.on(events.NewMessage(pattern=r'\.respond help', outgoing=True))
        async def respond_help(event):
            help_text = (
                "ü§ñ **–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ - –ü–æ–º–æ—â—å**\n\n"
                "‚ö° **–ö–æ–º–∞–Ω–¥—ã:**\n"
                "‚Ä¢ `.respond` - –≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫\n"
                "‚Ä¢ `.respond set <—Ç–µ–∫—Å—Ç>` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞\n"
                "‚Ä¢ `.respond status` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å\n"
                "‚Ä¢ `.respond reset` - —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
                "‚Ä¢ `.respond help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "‚öôÔ∏è **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n"
                "‚Ä¢ –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –Ω–∞ 3 –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                "‚Ä¢ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –µ—Å–ª–∏ —Ö–æ–∑—è–∏–Ω –æ–Ω–ª–∞–π–Ω\n"
                "‚Ä¢ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –µ—Å–ª–∏ —Ç—ã —É–∂–µ –ø–∏—Å–∞–ª —á–µ–ª–æ–≤–µ–∫—É"
            )
            await event.edit(help_text)

        @self.client.on(events.NewMessage(outgoing=True))
        async def outgoing_watcher(event):
            if event.is_private:
                self.answered_users.add(event.chat_id)

        @self.client.on(events.NewMessage(incoming=True))
        async def message_watcher(event):
            try:
                if not self.enabled or not event.is_private or event.out:
                    return

                sender = await event.get_sender()
                if sender.bot:
                    return

                # –ü–æ–¥—Ö–≤–∞—Ç owner_id, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
                if not self.owner_id:
                    me = await self.client.get_me()
                    self.owner_id = me.id

                # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ö–æ–∑—è–∏–Ω –æ–Ω–ª–∞–π–Ω
                me = await self.client.get_entity(self.owner_id)
                if str(me.status).lower() == "userstatusonline":
                    return

                # –ï—Å–ª–∏ —Ç—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª —ç—Ç–æ–º—É —é–∑–µ—Ä—É
                if event.chat_id in self.answered_users:
                    return

                # –°—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                self.message_counters[event.chat_id] = self.message_counters.get(event.chat_id, 0) + 1
                count = self.message_counters[event.chat_id]

                if count % 3 == 0 and self.response_text:
                    await event.reply(self.response_text)
                    print(f"[AutoResponder] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {sender.id}")
            except Exception as e:
                print(f"[AutoResponder] –û—à–∏–±–∫–∞: {e}")


def register(client, owner_id=None):
    responder_module = AutoResponderModule(client, owner_id)
    responder_module.register()
