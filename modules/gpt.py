import asyncio
from telethon import events
from g4f.client import Client as G4FClient

def register(client):
    g4f_client = G4FClient()

    @client.on(events.NewMessage(pattern=r'\.gpt (.+)', outgoing=True))
    async def handle_gpt(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã .gpt"""
        prompt = event.pattern_match.group(1)
        
        try:
            await event.edit("ü§ñ **GPT –¥—É–º–∞–µ—Ç...**")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ G4F
            response = await asyncio.to_thread(
                lambda: g4f_client.chat.completions.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=1500
                )
            )
            
            if not response.choices or not response.choices[0].message.content:
                await event.edit("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
                return
                
            answer = response.choices[0].message.content.strip()
            
            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(answer) > 4000:
                answer = answer[:4000] + "..."
                
            await event.edit(f"ü§ñ **GPT-4:**\n\n{answer}")
            
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    print("‚úÖ –ú–æ–¥—É–ª—å GPT –∑–∞–≥—Ä—É–∂–µ–Ω!")
