from telethon import events
import asyncio
import re

class CallModule:
    def __init__(self, client):
        self.client = client

    def register(self):
        @self.client.on(events.NewMessage(pattern=r'\.call(?: (\d+))?$', outgoing=True))
        async def call_all_handler(event):
            """–ü—Ä–∏–∑–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
                if not (event.is_group or event.is_channel):
                    await event.edit("‚ùå **–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö**")
                    return

                # –ß–∏—Å–ª–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                match = re.match(r"\.call(?: (\d+))?", event.raw_text)
                limit = int(match.group(1)) if match and match.group(1) else None

                await event.edit("üîç **–°–æ–±–∏—Ä–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...**")

                # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                participants = []
                async for user in event.client.iter_participants(event.chat_id, limit=None):
                    if not user.bot and user.username:
                        participants.append(user)

                if not participants:
                    await event.edit("‚ùå **–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏**")
                    return

                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ª–∏–º–∏—Ç, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö N
                if limit:
                    participants = participants[:limit]

                await event.edit(f"‚úÖ **–ù–∞–π–¥–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞**")

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                usernames = [f"@{u.username}" for u in participants]
                call_message = "üì¢ **–ü—Ä–∏–∑—ã–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!**\n\n" + " ".join(usernames)

                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ
                if len(call_message) > 4000:
                    parts = [call_message[i:i+4000] for i in range(0, len(call_message), 4000)]
                    for part in parts:
                        await event.respond(part)
                        await asyncio.sleep(0.5)
                else:
                    await event.respond(call_message)

                await event.delete()

            except Exception as e:
                await event.edit(f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}")


def register(client):
    call_module = CallModule(client)
    call_module.register()
