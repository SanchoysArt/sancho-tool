import asyncio
from telethon import events
from telethon.tl.functions.messages import DeleteHistoryRequest
from telethon.tl.functions.channels import JoinChannelRequest


class VoiceModule:
    def __init__(self, client):
        self.client = client
        self.voice_bot_username = "@silero_voice_bot"
        self.channel_username = "@silero_voice_news"

        self.voices = {
            "–∞–∑–∏—Ä": "/speaker azir",
            "–≥—É–±–∫–∞ –±–æ–±": "/speaker spongebob", 
            "—Å–∫–≤–∏–¥–≤–∞—Ä–¥": "/speaker squidward",
            "—à—Ä—ç–∫": "/speaker shrek",
            "–ø–ª–∞–Ω–∫—Ç–æ–Ω": "/speaker plankton",
            "–¥–æ–∫—Ç–æ—Ä –ª–∏–≤—Å–∏": "/speaker livsy", 
            "–±–∞–Ω–¥–∏—Ç": "/speaker bandit",
            "pudge": "/speaker pudge"
        }
        self.selected_voice = "–∞–∑–∏—Ä"
        self.voice_handler = None

    async def cleanup_bot_chat(self):
        """–û—á–∏—â–∞–µ—Ç —á–∞—Ç —Å –±–æ—Ç–æ–º"""
        try:
            bot_entity = await self.client.get_entity(self.voice_bot_username)
            await self.client(DeleteHistoryRequest(peer=bot_entity, max_id=0, just_clear=True))
        except:
            pass

    async def setup_bot(self, bot_entity):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
            try:
                await self.client.get_entity(self.channel_username)
            except:
                channel_entity = await self.client.get_entity(self.channel_username)
                await self.client(JoinChannelRequest(channel_entity))

            # –ó–∞–ø—É—Å–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            await self.client.send_message(bot_entity, "/start")
            await self.client.send_message(bot_entity, "/videonotes")

            # –ñ–¥–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            async for message in self.client.iter_messages(bot_entity, limit=5):
                if message.reply_markup:
                    for i, row in enumerate(message.reply_markup.rows):
                        for j, button in enumerate(row.buttons):
                            if (hasattr(button, 'data') and b'check_subscription' in button.data):
                                await message.click(i, j)
                                break
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False

    async def wait_for_voice_message(self, bot_entity):
        """–û–∂–∏–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            for _ in range(10):  # 10 –ø–æ–ø—ã—Ç–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ ~10 —Å–µ–∫—É–Ω–¥
                async for message in self.client.iter_messages(bot_entity, limit=3):
                    if message.voice:
                        return message.voice
                await asyncio.sleep(1)
            return None
        except:
            return None

    async def process_voice_command(self, event, voice_name, text_to_speak):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
        try:
            await event.delete()
            bot_entity = await self.client.get_entity(self.voice_bot_username)
            
            # –û—á–∏—â–∞–µ–º —á–∞—Ç
            await self.cleanup_bot_chat()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
            success = await self.setup_bot(bot_entity)
            if not success:
                await event.reply("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
                return

            # –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
            if voice_name in self.voices:
                await self.client.send_message(bot_entity, self.voices[voice_name])
                await asyncio.sleep(0.5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await self.client.send_message(bot_entity, text_to_speak)
            
            # –ñ–¥–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice_message = await self.wait_for_voice_message(bot_entity)
            
            if voice_message:
                await self.client.send_file(event.chat_id, voice_message, caption=None)
                print("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç")
            else:
                await event.reply("‚ùå –ë–æ—Ç –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ")
                print("‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
            
            # –û—á–∏—â–∞–µ–º —á–∞—Ç
            await self.cleanup_bot_chat()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await event.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ")

    async def show_help(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """üé§ **Sancho Voice Bot - –ü–æ–º–æ—â—å**

**–í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞:**
`.–≥–æ–ª–æ—Å –∞–∑–∏—Ä` - –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –ê–∑–∏—Ä–∞
`.–≥–æ–ª–æ—Å –≥—É–±–∫–∞ –±–æ–±` - –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –ì—É–±–∫–∏ –ë–æ–±–∞  
`.–≥–æ–ª–æ—Å —Å–∫–≤–∏–¥–≤–∞—Ä–¥` - –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –°–∫–≤–∏–¥–≤–∞—Ä–¥–∞
`.–≥–æ–ª–æ—Å —à—Ä—ç–∫` - –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –®—Ä—ç–∫–∞
`.–≥–æ–ª–æ—Å –ø–ª–∞–Ω–∫—Ç–æ–Ω` - –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –ü–ª–∞–Ω–∫—Ç–æ–Ω–∞
`.–≥–æ–ª–æ—Å –¥–æ–∫—Ç–æ—Ä –ª–∏–≤—Å–∏` - –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –î–æ–∫—Ç–æ—Ä–∞ –õ–∏–≤—Å–∏
`.–≥–æ–ª–æ—Å –±–∞–Ω–¥–∏—Ç` - –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –ë–∞–Ω–¥–∏—Ç–∞
`.–≥–æ–ª–æ—Å pudge` - –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å Pudge

**–ì–µ–Ω–µ—Ä–∞—Ü–∏—è:**
`.–≥—Å –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏` - —Å —Ç–µ–∫—É—â–∏–º –≥–æ–ª–æ—Å–æ–º
`.–≥—Å —Ö–µ–ª–ø` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"""

        await event.delete()
        await event.reply(help_text)

    async def handle_voice_selection(self, event, voice_name):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞"""
        try:
            await event.delete()
            if voice_name in self.voices:
                self.selected_voice = voice_name
                await event.reply(f"‚úÖ –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {voice_name}")
            else:
                await event.reply("‚ùå –ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .–≥—Å —Ö–µ–ª–ø")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞: {e}")

    async def handle_message(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã"""
        try:
            text = event.raw_text

            if text.startswith('.–≥–æ–ª–æ—Å ') and len(text) > 7:
                voice_name = text[7:].strip().lower()
                await self.handle_voice_selection(event, voice_name)

            elif text.startswith('.–≥—Å ') and len(text) > 4:
                text_to_speak = text[4:].strip()
                if text_to_speak.lower() == '—Ö–µ–ª–ø':
                    await self.show_help(event)
                else:
                    asyncio.create_task(self.process_voice_command(event, self.selected_voice, text_to_speak))

            elif text == '.–≥—Å —Ö–µ–ª–ø':
                await self.show_help(event)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        @self.client.on(events.NewMessage(pattern=r'\.(–≥—Å|–≥–æ–ª–æ—Å) '))
        async def handler(event):
            await self.handle_message(event)
