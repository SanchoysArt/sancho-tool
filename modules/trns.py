import asyncio
from telethon import events
from googletrans import Translator, LANGUAGES

def register(client):
    translator = Translator()
    active_users = {}

    @client.on(events.NewMessage(pattern=r"\.trns on (\w+)"))
    async def enable_translation(event):
        """–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥"""
        lang_code = event.pattern_match.group(1).lower()
        
        if lang_code not in LANGUAGES:
            await event.edit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞!\n"
                           "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.trns list` –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–¥–æ–≤")
            return
            
        active_users[event.sender_id] = lang_code
        lang_name = LANGUAGES[lang_code].capitalize()
        
        await event.edit(f"‚úÖ **–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**\n"
                       f"‚ñ∏ –Ø–∑—ã–∫: `{lang_name}`\n"
                       f"‚ñ∏ –†–µ–∂–∏–º: –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –∏—Å—Ö–æ–¥—è—â–∏—Ö")

    @client.on(events.NewMessage(pattern=r"\.trns off"))
    async def disable_translation(event):
        """–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥"""
        if event.sender_id in active_users:
            lang_code = active_users[event.sender_id]
            lang_name = LANGUAGES[lang_code].capitalize()
            del active_users[event.sender_id]
            
            await event.edit(f"üî¥ **–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**\n"
                           f"‚ñ∏ –ë—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: `{lang_name}`")
        else:
            await event.edit("‚ÑπÔ∏è –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏ —Ç–∞–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")

    @client.on(events.NewMessage(pattern=r"\.trns list"))
    async def show_languages(event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤"""
        languages = []
        for code, name in LANGUAGES.items():
            languages.append(f"`{code}` - {name.capitalize()}")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã
        chunks = [languages[i:i+20] for i in range(0, len(languages), 20)]
        
        for i, chunk in enumerate(chunks):
            if i == 0:
                await event.edit(f"üåç **–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:**\n\n" + "\n".join(chunk))
            else:
                await event.reply("\n".join(chunk))

    @client.on(events.NewMessage(pattern=r"\.trns help"))
    async def translation_help(event):
        """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"""
        help_text = (
            "üåê **Translation Help:**\n\n"
            "**.trns on <–∫–æ–¥>** - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥\n"
            "**.trns off** - –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥\n"
            "**.trns list** - –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤\n"
            "**.trns help** - –≠—Ç–∞ –ø–æ–º–æ—â—å\n\n"
        )
        await event.edit(help_text)

    @client.on(events.NewMessage(outgoing=True))
    async def auto_translate_outgoing(event):
        """–ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if event.sender_id not in active_users:
            return
            
        if not event.text or event.text.startswith('.'):
            return
            
        try:
            lang_code = active_users[event.sender_id]
            translated = translator.translate(event.text, dest=lang_code)
            
            if translated.src != lang_code:
                await event.edit(translated.text)
                
        except Exception as e:
            print(f"Translation error: {e}")
            await event.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")

    print("üîÑ –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω")
