import asyncio
import os
from telethon import events, types
from yt_dlp import YoutubeDL

def register(client):
    
    @client.on(events.NewMessage(pattern=r"\.media help", outgoing=True))
    async def media_help(event):
        """–ü–æ–º–æ—â—å –ø–æ –º–µ–¥–∏–∞ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = (
            "üìÅ **Media Commands Help:**\n\n"
            "**.download** - –°–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ –≤ –≥–∞–ª–µ—Ä–µ—é (–æ—Ç–≤–µ—Ç–æ–º)\n"
            "**.m <–Ω–∞–∑–≤–∞–Ω–∏–µ>** - –ù–∞–π—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É\n"
            "**.voice** - –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ/–≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ (–æ—Ç–≤–µ—Ç–æ–º)\n"
            "**.voice auto on** - –ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö\n"
            "**.voice auto off** - –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ\n\n"
            "üí° **–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "`.download` (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)\n"
            "`.m Alan Walker Faded` - –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É\n"
            "`.m —Ä—É—Å—Å–∫–∞—è –ø–æ–ø—Å–∞` - –†—É—Å—Å–∫–∞—è –º—É–∑—ã–∫–∞\n"
            "`.voice` (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ)"
        )
        await event.edit(help_text)

    @client.on(events.NewMessage(pattern=r"\.download", outgoing=True))
    async def download_media(event):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –≤ –≥–∞–ª–µ—Ä–µ—é"""
        if not event.reply_to_msg_id:
            await event.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞")
            return
        
        reply_msg = await event.get_reply_message()
        
        if not (reply_msg.photo or reply_msg.video or reply_msg.document):
            await event.edit("‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞")
            return
        
        try:
            await event.edit("üì• –°–∫–∞—á–∏–≤–∞—é –º–µ–¥–∏–∞...")
            file_path = await reply_msg.download_media()
            
            downloads_dir = "/sdcard/Download/"
            if os.path.exists(downloads_dir):
                import shutil
                filename = os.path.basename(file_path)
                new_path = os.path.join(downloads_dir, filename)
                shutil.move(file_path, new_path)
                await event.edit(f"‚úÖ –ú–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤:\n`{new_path}`")
            else:
                await event.edit(f"‚úÖ –ú–µ–¥–∏–∞ —Å–∫–∞—á–∞–Ω–æ:\n`{file_path}`")
                
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {str(e)}")

    @client.on(events.NewMessage(pattern=r"\.m (.+)", outgoing=True))
    async def search_music(event):
        """–ü–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–∑—ã–∫–∏ –≤ MP3"""
        search_query = event.pattern_match.group(1)
        
        try:
            await event.edit(f"üéµ –ò—â—É: `{search_query}`...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è MP3
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': 'music_%(id)s.%(ext)s',
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '192',
                }],
                'quiet': True,
                'default_search': 'ytsearch1',
                'noplaylist': True,
            }
            
            with YoutubeDL(ydl_opts) as ydl:
                # –ò—â–µ–º —Ç—Ä–µ–∫
                info = ydl.extract_info(f"ytsearch:{search_query}", download=True)
                
                if not info or 'entries' not in info or not info['entries']:
                    await event.edit("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                video = info['entries'][0]
                title = video.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                duration = video.get('duration', 0)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                minutes = duration // 60
                seconds = duration % 60
                duration_str = f"{minutes}:{seconds:02d}"
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–∫–∞—á–∞–Ω–Ω—ã–π MP3 —Ñ–∞–π–ª
                mp3_filename = ydl.prepare_filename(video).replace('.webm', '.mp3').replace('.m4a', '.mp3')
                
                if not os.path.exists(mp3_filename):
                    # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—â–µ–º —Ñ–∞–π–ª
                    for file in os.listdir('.'):
                        if file.startswith('music_') and file.endswith('.mp3'):
                            mp3_filename = file
                            break
                    else:
                        await event.edit("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ MP3")
                        return
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MP3 —Ñ–∞–π–ª
                await event.edit("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é MP3...")
                await client.send_file(
                    event.chat_id,
                    mp3_filename,
                    caption=f"üéµ **{title}**\n‚è± **{duration_str}**\nüîç **–ó–∞–ø—Ä–æ—Å:** `{search_query}`",
                    attributes=[types.DocumentAttributeAudio(
                        duration=duration,
                        title=title,
                        performer="YouTube"
                    )]
                )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(mp3_filename)
                except:
                    pass
                
                await event.delete()
                
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    voice_settings = {}
    processing = False

    @client.on(events.NewMessage(pattern=r"^\.voice$", outgoing=True))
    async def voice_command(event):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        nonlocal processing
        
        if not event.reply_to_msg_id:
            await event.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫")
            return
        
        reply_msg = await event.get_reply_message()
        
        if not (reply_msg.voice or reply_msg.video_note):
            await event.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫")
            return
        
        if processing:
            await event.edit("‚è≥ –£–∂–µ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            return
        
        processing = True
        try:
            status_msg = await event.edit("üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
            await client.send_message("@smartspeech_sber_bot", reply_msg)
            
            for _ in range(30):
                await asyncio.sleep(1)
                messages = await client.get_messages("@smartspeech_sber_bot", limit=5)
                
                for msg in messages:
                    if msg.text and msg.text != "–ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!":
                        await status_msg.edit(f"üìù **–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n\n{msg.text}")
                        processing = False
                        return
            
            await status_msg.edit("‚ùå –¢–∞–π–º–∞—É—Ç: –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
            
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            processing = False

    @client.on(events.NewMessage(pattern=r"\.voice auto on", outgoing=True))
    async def voice_auto_on(event):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        voice_settings[event.sender_id] = True
        await event.edit("‚úÖ –ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –≤–∫–ª—é—á–µ–Ω–æ")

    @client.on(events.NewMessage(pattern=r"\.voice auto off", outgoing=True))
    async def voice_auto_off(event):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        voice_settings[event.sender_id] = False
        await event.edit("üî¥ –ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –≤—ã–∫–ª—é—á–µ–Ω–æ")

    print("‚úÖ –ú–æ–¥—É–ª—å –º–µ–¥–∏–∞ –∑–∞–≥—Ä—É–∂–µ–Ω")
